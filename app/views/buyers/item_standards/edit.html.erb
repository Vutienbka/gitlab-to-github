<%= render 'form', url: item_standards_update_buyers_item_request_path, method: 'post' %>

<script type="text/javascript">
  Dropzone.autoDiscover = false;
  let id = $('.flex--file2').data('item-standard');
  let formData = new FormData();

  $('.dropzone').each(function(){
    $(this).dropzone({
      url: "/buyers/item_requests/" + id + "/item_standards/update",
      dictDefaultMessage: "<p>ここにファイルを<br>ドラッグアンドドロップ</p><p>または</p><label for='file_upload'>PCから<span class='textbr'>アップロード</span></label>",
      uploadMultiple: true,
      addRemoveLinks: true,
      autoProcessQueue: false,
      parallelUploads: 100,
      maxFiles: 100,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      },
      init: function() {
        var myDropzone = this;
        if (myDropzone.files.length <= 0 && myDropzone.element.id == 'itemStandardDropzone0') {
          $("#btnSubmit").attr('disabled', 'disabled');
        }

        this.on("addedfile", function(file) {
          switch (myDropzone.element.id) {
            case 'itemStandardDropzone0':
              $("#btnSubmit").removeAttr('disabled');
              formData.append("item_standard[file_inspection_criteria][" + this.files.length + "]", file);
              break;
            case 'itemStandardDropzone1':
              formData.append("item_standard[file_test_criteria][" + this.files.length + "]", file);
              break;
            default:
              break;
          }
          // Prevent upload duplicate files
          if (this.files.length) {
            var i, len;
            for (i = 0, len = this.files.length; i < len - 1; i++) {
              if (this.files[i].name === file.name && this.files[i].size === file.size) {
                alert("このファイル" + file.name + "が既に存在しています。");
                this.removeFile(file);
              }
            }
          }
        });
        this.on("removedfile", function(file) {
          if (file.status == undefined) {
            var _ref,
                url = "/buyers/item_requests/" + id + "/item_standards/remove_file";

            switch (myDropzone.element.id) {
              case 'itemStandardDropzone0':
                var index_of_file_inspection_criteria = file.index
                break;
              case 'itemStandardDropzone1':
                var index_of_file_test_criteria = file.index
                break;
              default:
                break;
            }

            // Prevent action when uploading
            prevent_action_when_uploading();

            $.ajax({
              url: url,
              type: "DELETE",
              data: {
                index_of_file_inspection_criteria: index_of_file_inspection_criteria,
                index_of_file_test_criteria: index_of_file_test_criteria,
              },
              headers: {
                'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
              },
              success: function(data) {
                console.log('AJAX success.');
                location.reload();
              },
              error: function(jqXHR, textStatus, errorThrown) {
                console.log('AJAX call failed.');
                console.log(textStatus + ': ' + errorThrown);
              },
              complete: function() {
                console.log('AJAX call completed');
              }
            });
          }
        });
        switch (myDropzone.element.id) {
          case 'itemStandardDropzone0':
            <% @item_standard.file_inspection_criteria.each_with_index do |image, index| %>
              var mockFile = {
                name: "<%= image.file.filename %>",
                size: <%= image.size %>,
                index: <%= index %>,
              }
              myDropzone.emit("addedfile", mockFile);
              myDropzone.createThumbnailFromUrl(mockFile, "<%= image.url %>");
              myDropzone.emit("complete", mockFile);
              myDropzone.files.push(mockFile);
            <% end %>
            break;
          case 'itemStandardDropzone1':
            <% @item_standard.file_test_criteria.each_with_index do |image, index| %>
              var mockFile = {
                name: "<%= image.file.filename %>",
                size: <%= image.size %>,
                index: <%= index %>,
              }
              myDropzone.emit("addedfile", mockFile);
              myDropzone.createThumbnailFromUrl(mockFile, "<%= image.url %>");
              myDropzone.emit("complete", mockFile);
              myDropzone.files.push(mockFile);
            <% end %>
            break;
          default:
            break;
        }
      }
    });
  });

  $(".continue-btn").on("click", function(e) {
    e.preventDefault();
    e.stopPropagation();

    // Prevent action when uploading
    prevent_action_when_uploading();

    $.ajax({
      url: "/buyers/item_requests/" + id + "/item_standards/update",
      type: "POST",
      data:  formData,
      dataType: 'json',
      contentType: false,
      processData: false,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      },
      success: function(data) {
        window.location.href = "/buyers/item_requests/" + id + "/item_conditions/edit"
      },
      error: function(jqXHR, textStatus, errorThrown) {
        console.log('AJAX call failed.');
        console.log(textStatus + ': ' + errorThrown);
      },
      complete: function() {
        console.log('AJAX call completed');
      }
    });
  });

  function prevent_action_when_uploading() {
    $('.flex--file2').prepend('<img id="ripple_loading" src="<%= asset_path('ripple_loading.svg') %>" />')
    $("#btnSubmit").attr('disabled', 'disabled');
    $(".dz-remove").addClass('d-none');
  }
</script>
