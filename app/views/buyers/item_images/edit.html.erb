<%= render 'form', url: item_images_edit_buyers_item_request_path, method: 'post' %>

<script>
  Dropzone.autoDiscover = false;
  let id = $('.mb-3').data('item-image');
  let url = "/buyers/item_requests/" + id + "/item_images/update";
  let formData = new FormData();

  $('#itemImageDropzone').dropzone({
    url: url,
    dictDefaultMessage: "<p>ここにファイルを<br>ドラッグアンドドロップ</p><p>または</p><label for='file_upload'>PCから<span class='textbr'>アップロード</span></label>",
    uploadMultiple: true,
    addRemoveLinks: true,
    autoProcessQueue: false,
    parallelUploads: 100,
    maxFiles: 100,
    acceptedFiles: ".jpeg,.jpg,.png,.gif",
    headers: {
      'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
    },
    init: function() {
      var myDropzone = this;

      if(this.files.length <= 0) {
        $("#btnSubmit").attr('disabled', 'disabled');
      }

      this.on("addedfile", function(file) {
        $("#btnSubmit").removeAttr('disabled');

        formData.append("item_image[file_images][" + this.files.length + "]", file);

        // Prevent upload duplicate files
        if (this.files.length) {
          var i, len;
          for (i = 0, len = this.files.length; i < len - 1; i++) {
            if (this.files[i].name === file.name && this.files[i].size === file.size && this.files[i].lastModifiedDate.toString() === file.lastModifiedDate.toString()) {
              alert("このファイル" + file.name + "が既に存在しています。");
              this.removeFile(file);
            }
          }
        }
      });
      this.on("removedfile", function(file) {
        var _ref,
            url = "/buyers/item_requests/" + id + "/item_images/remove_file",
            index_of_file_images = file.index

        // Prevent action when uploading
        prevent_action_when_uploading();

        $.ajax({
          url: url,
          type: "DELETE",
          data: {
            index_of_file_images: index_of_file_images
          },
          headers: {
            'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
          },
          success: function(data) {
            location.reload();
          },
          error: function(jqXHR, textStatus, errorThrown) {
            console.log('AJAX call failed.');
            console.log(textStatus + ': ' + errorThrown);
          },
          complete: function() {
            console.log('AJAX call completed');
          }
        });
      });
      this.on("successmultiple", function(files, response) {
        window.location.href = "/buyers/item_requests/" + id + "/item_qualities/edit"
      });
      <% @item_image.file_images.each_with_index do |image, index| %>
        var mockFile = {
          name: "<%= image.file.filename %>",
          size: <%= image.size %>,
          index: <%= index %>,
        }
        myDropzone.emit("addedfile", mockFile);
        myDropzone.createThumbnailFromUrl(mockFile, "<%= image.url %>");
        myDropzone.emit("complete", mockFile);
        myDropzone.files.push(mockFile);
      <% end %>
    }
  });


  $("#btnSubmit").on("click", function(e) {
    e.preventDefault();
    e.stopPropagation();

    // Prevent action when uploading
    prevent_action_when_uploading();

    $.ajax({
      url: url,
      type: "POST",
      data:  formData,
      dataType: 'json',
      contentType: false,
      processData: false,
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      },
      success: function(data) {
        window.location.href = "/buyers/item_requests/" + id + "/item_qualities/edit"
      },
      error: function(jqXHR, textStatus, errorThrown) {
        console.log('AJAX call failed.');
        console.log(textStatus + ': ' + errorThrown);
      },
      complete: function() {
        console.log('AJAX call completed');
      }
    });
  });

  function prevent_action_when_uploading() {
    $('.mb-3').prepend('<img id="ripple_loading" src="<%= asset_path('ripple_loading.svg') %>" />')
    $("#btnSubmit").attr('disabled', 'disabled');
    $(".dz-remove").addClass('d-none');
  }
</script>
